/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 23 10:20:10 GMT 2022
 */

package ir.ramtung.impl2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ir.ramtung.impl2.Library;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Library_ESTest extends Library_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "S";
      String string1 = null;
      int int0 = library0.getTotalPenalty(":M=b{n_Co5M>c#jYc_");
      assertEquals(0, int0);
      
      library0.extend((String) null, (String) null);
      String string2 = "ir.ramtung.sts01.LibraryException";
      library0.extend((String) null, "ir.ramtung.sts01.LibraryException");
      int int1 = (-291);
      library0.addBook("S", (-291));
      String string3 = "2]GW\"V2m";
      // Undeclared exception!
      library0.timePass(2147483645);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      List<String> list0 = library0.availableTitles();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      library0.addReference(")tPXGtsA/pfz`P", (-4893));
      String string0 = " ";
      int int0 = (-1294);
      int int1 = (-1277696462);
      int int2 = (-2034902456);
      try { 
        library0.addProfMember(" ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // prof name is empty
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "ir.ramtung.impl2.Reference";
      library0.addProfMember("ir.ramtung.impl2.Reference");
      int int0 = 0;
      library0.addReference("", 0);
      int int1 = library0.getTotalPenalty("");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      try { 
        library0.borrow("", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // this book doesnt exist
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = " ";
      String string1 = "fC3</6cIp &6}ndi,";
      library0.borrow("fC3</6cIp &6}ndi,", "fC3</6cIp &6}ndi,");
      int int0 = 1015;
      try { 
        library0.addReference(" ", 1015);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // reference name is empty
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.timePass(492);
      library0.addProfMember("o$uCd=au8x@");
      library0.returnDocument("", "");
      library0.extend("o$uCd=au8x@", "book name is empty");
      library0.addProfMember("ir.ramtung.impl2.Person");
      try { 
        library0.addProfMember("o$uCd=au8x@");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the member has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.addProfMember("UWLNO,.DA");
      library0.timePass(21);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.addProfMember("n]D\"x");
      library0.extend("n]D\"x", "n]D\"x");
      library0.addStudentMember("n]D\"x", "student name is empty");
      library0.addBook("|H!?1T{S@d", (-396));
      List<String> list0 = library0.availableTitles();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains("student name is empty"));
      
      library0.extend("", "");
      library0.borrow("student name is empty", "n]D\"x");
      List<String> list1 = library0.availableTitles();
      assertNotNull(list1);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(list1.contains("n]D\"x"));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      
      library0.borrow("n]D\"x", ">owuZT} K");
      try { 
        library0.addMagazine(">owuZT} K", 0, 0, (-396));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // magazine`s year is incorrect
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.borrow("", "");
      library0.addProfMember("");
      int int0 = library0.getTotalPenalty("");
      assertEquals(0, int0);
      
      library0.returnDocument("", "wWraJF,xRBXG}}sY");
      library0.extend("ir.ramtung.impl2.Student", "");
      // Undeclared exception!
      try { 
        library0.borrow("", "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.addMagazine("4;u2", 21, 21, 0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.addStudentMember(");b{o}$i!/H", ");b{o}$i!/H");
      library0.timePass(0);
      String string0 = "A^_PHa<";
      library0.addStudentMember("A^_PHa<", "A^_PHa<");
      library0.addProfMember("^");
      try { 
        library0.addMagazine("wiUVy.aZmuA&,M2%X>\"", 3000, 0, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // magazine`s number is incorrect
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      List<String> list0 = library0.availableTitles();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        library0.addReference((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "ir.ramtung.impl2.Reference";
      int int0 = library0.getTotalPenalty("ir.ramtung.impl2.Reference");
      assertEquals(0, int0);
      
      List<String> list0 = library0.availableTitles();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains("ir.ramtung.impl2.Reference"));
      
      library0.addProfMember("ir.ramtung.impl2.Reference");
      String string1 = ",y/EU";
      String string2 = "2+,{II0nSnFkN=:8FC";
      library0.addProfMember("2+,{II0nSnFkN=:8FC");
      try { 
        library0.addStudentMember(",y/EU", "2+,{II0nSnFkN=:8FC");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the member has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.extend("cCH0q#tL%:#URWS", "cant extend");
      String string0 = "magazine`s year is incorrect";
      library0.extend("magazine`s year is incorrect", "magazine`s year is incorrect");
      library0.addStudentMember(" ", " ");
      try { 
        library0.addMagazine(" ", 5, 5, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // magazine name is empty
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = " ";
      library0.addStudentMember("JO}9+;T7z^&,I`AT+F5", " ");
      int int0 = 0;
      library0.timePass(0);
      try { 
        library0.addBook(" ", 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // book name is empty
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.returnDocument("", "C _>s H`rOo");
      library0.addBook("0Ze@#`", 0);
      library0.timePass(0);
      List<String> list0 = library0.availableTitles();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(""));
      
      library0.borrow("B(", "'%|");
      library0.addStudentMember("'%|", "68xHcisx'TTb5~");
      library0.returnDocument("68xHcisx'TTb5~", "0Ze@#`");
      List<String> list1 = library0.availableTitles();
      assertNotNull(list1);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(list1.contains(""));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      List<String> list0 = library0.availableTitles();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      int int0 = 10;
      library0.addBook("ir.ramtung.impl2.Student", 10);
      List<String> list1 = library0.availableTitles();
      assertNotNull(list1);
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertTrue(list1.contains("ir.ramtung.impl2.Student"));
      assertFalse(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      
      library0.returnDocument("<?w]UU06{$H=", "the member cant borrow any more");
      String string0 = "ir.ramtung.impl2.Document";
      int int1 = (-1);
      library0.addBook("the member cant borrow any more", 0);
      library0.addReference("ir.ramtung.impl2.Document", (-1));
      library0.timePass(0);
      int int2 = library0.getTotalPenalty("ir.ramtung.impl2.Reference");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      library0.borrow("ir.ramtung.impl2.Reference", "w!f:8P3qkTsDz");
      try { 
        library0.borrow("w!f:8P3qkTsDz", "ir.ramtung.impl2.Document");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // this book doesnt exist
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.addMagazine("magazine`s year is incorrect", 1, 1, 1);
      int int0 = library0.getTotalPenalty("magazine`s year is incorrect");
      assertEquals(0, int0);
      
      library0.borrow("", "Br+2}{>#9%eE");
      library0.timePass(0);
      int int1 = library0.getTotalPenalty("MV=A.(?ciuto");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      List<String> list0 = library0.availableTitles();
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(list0.contains("magazine`s year is incorrect"));
      assertFalse(list0.contains("MV=A.(?ciuto"));
      
      try { 
        library0.timePass((-2564));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // days cant be negative
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "";
      library0.returnDocument("", "");
      try { 
        library0.addMagazine("", 5000, (-1794), 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // magazine`s number is incorrect
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "";
      try { 
        library0.addStudentMember("", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // student id is empty
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "ir.ramtung.impl2.Book";
      library0.returnDocument("EK", "EK");
      int int0 = (-3614);
      String string1 = "8";
      library0.borrow("ir.ramtung.impl2.Book", "8");
      library0.addReference("ir.ramtung.impl2.Book", (-3614));
      try { 
        library0.timePass((-1630));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // days cant be negative
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "";
      library0.borrow("", "");
      library0.addProfMember("");
      library0.addReference("", 0);
      int int0 = library0.getTotalPenalty("");
      assertEquals(0, int0);
      
      try { 
        library0.addReference("", (-1820));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the reference has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "ir.ramtung.impl2.Document";
      library0.extend("ir.ramtung.impl2.Document", "ir.ramtung.impl2.Document");
      int int0 = library0.getTotalPenalty("ir.ramtung.impl2.Document");
      assertEquals(0, int0);
      
      String string1 = null;
      library0.addProfMember("ir.ramtung.impl2.Document");
      // Undeclared exception!
      try { 
        library0.addMagazine((String) null, 0, (-2357), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = null;
      library0.borrow((String) null, (String) null);
      int int0 = 138;
      // Undeclared exception!
      try { 
        library0.addProfMember((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.addBook("", 1);
      String string0 = "";
      String string1 = "})";
      library0.timePass(7);
      library0.addProfMember("");
      library0.addReference("})", 1);
      // Undeclared exception!
      try { 
        library0.addBook((String) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.addProfMember("");
      int int0 = library0.getTotalPenalty("");
      assertEquals(0, int0);
      
      String string0 = "@(6K,j";
      try { 
        library0.addMagazine("@(6K,j", 0, 0, (-1439));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // magazine`s year is incorrect
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.addProfMember("");
      library0.addProfMember("g}(}1jw`17K{MpDD");
      library0.returnDocument("", "g}(}1jw`17K{MpDD");
      String string0 = "";
      try { 
        library0.addProfMember("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the member has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "VFa|5d\\^$@hM";
      String string1 = "cant extend";
      // Undeclared exception!
      try { 
        library0.addStudentMember((String) null, "cant extend");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "";
      try { 
        library0.addStudentMember(",{IXEMRWj", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // student name is empty
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "magazine`s number is incorrect";
      int int0 = library0.getTotalPenalty("magazine`s number is incorrect");
      assertEquals(0, int0);
      
      library0.addBook("F>ihy>", (-1));
      library0.returnDocument("w=|`ZM*B+\"jT", " zO/i+q5eLRy");
      List<String> list0 = library0.availableTitles();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(string0));
      
      int int1 = (-1);
      List<String> list1 = library0.availableTitles();
      assertNotNull(list1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(list1.contains(string0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      
      try { 
        library0.addMagazine("w=|`ZM*B+\"jT", 0, (-1), (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // magazine`s year is incorrect
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      int int0 = 0;
      library0.addReference("`n9:,|", 0);
      int int1 = library0.getTotalPenalty("ir.ramtung.impl2.Reference");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      library0.addReference("ir.ramtung.impl2.Student", 0);
      library0.borrow("ir.ramtung.impl2.Reference", (String) null);
      library0.addBook("ir.ramtung.impl2.Reference", 0);
      String string0 = "Da(Ly3";
      library0.addProfMember("Da(Ly3");
      String string1 = "@z%6yY@D;xZ/H!69!";
      library0.extend("ir.ramtung.impl2.Reference", "@z%6yY@D;xZ/H!69!");
      library0.extend("ir.ramtung.impl2.Reference", "@z%6yY@D;xZ/H!69!");
      library0.borrow("ir.ramtung.impl2.Reference", "@z%6yY@D;xZ/H!69!");
      library0.addStudentMember("ir.ramtung.impl2.Reference", "ir.ramtung.impl2.Person");
      int int2 = 0;
      library0.timePass(0);
      library0.timePass(0);
      library0.addBook("S2dLdEx6", 0);
      int int3 = (-4733);
      try { 
        library0.addBook("ir.ramtung.impl2.Reference", (-4733));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the book has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.addProfMember("++LS{`!?ODX");
      library0.returnDocument("++LS{`!?ODX", "");
      try { 
        library0.timePass((-2098));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // days cant be negative
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.addStudentMember("{]|ffe+*87edli", "W");
      library0.addReference("{]|ffe+*87edli", (-2844));
      library0.addProfMember("7|'MAGX~XeVRw'J'");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.addProfMember("");
      library0.extend("", "");
      try { 
        library0.addProfMember("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the member has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      try { 
        library0.addStudentMember("e#}&)kbu", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // student name is empty
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.borrow("", "the member cant borrow any more");
      int int0 = library0.getTotalPenalty("");
      assertEquals(0, int0);
      
      library0.addReference("", (-1));
      library0.extend("", "");
      int int1 = library0.getTotalPenalty("");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      List<String> list0 = library0.availableTitles();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(""));
      
      try { 
        library0.addBook("", (-1999));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the book has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.extend("d.~nd", "");
      library0.addBook("d.~nd", 1405);
      library0.borrow("", (String) null);
      library0.addReference("", 0);
      library0.extend("d.~nd", "d.~nd");
      try { 
        library0.addMagazine("", 1405, 1405, (-2489));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the magazine has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.addBook("P6DahB", 0);
      library0.borrow("", "");
      library0.extend("P6DahB", "P6DahB");
      int int0 = 1;
      try { 
        library0.addReference("P6DahB", 1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the reference has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.timePass(64);
      library0.addStudentMember("WI=r0:gY~]/X.,_,t", "`p.&{CS,1*{|");
      List<String> list0 = library0.availableTitles();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains("`p.&{CS,1*{|"));
      
      library0.addStudentMember("tKi{(3h[@n[I", "L ur*'1>8Srt#c");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      List<String> list0 = library0.availableTitles();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      library0.addReference(")tPXGtsA/pfz`P", (-4893));
      String string0 = " ";
      int int0 = (-1294);
      int int1 = (-1277696462);
      int int2 = (-2034902456);
      try { 
        library0.addProfMember(" ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // prof name is empty
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "S";
      int int0 = (-1);
      try { 
        library0.timePass((-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // days cant be negative
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      List<String> list0 = library0.availableTitles();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      library0.addReference("reference name is empty", 1980);
      library0.timePass(1214);
      String string0 = "?`TW(";
      library0.extend("reference name is empty", "bNw)F{w+*g8|i}1");
      library0.borrow("?`TW(", "?`TW(");
      String string1 = " ";
      library0.borrow("reference name is empty", "reference name is empty");
      try { 
        library0.addReference(" ", 7);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // reference name is empty
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "$VBlzE*;f#.n-)'-5X";
      library0.extend("$VBlzE*;f#.n-)'-5X", "ir.ramtung.impl2.Book");
      library0.extend("ir.ramtung.impl2.Book", "\"-+^nLJt");
      library0.returnDocument("the magazine has already added", "the magazine has already added");
      int int0 = (-1569);
      // Undeclared exception!
      try { 
        library0.addBook((String) null, (-1569));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      List<String> list0 = library0.availableTitles();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = "=,aTq^";
      library0.addStudentMember("=,aTq^", "=,aTq^");
      library0.addStudentMember("=,aTq^", "9");
      String string1 = "the member has already added";
      List<String> list1 = library0.availableTitles();
      assertNotNull(list1);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(list1.contains(string1));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      
      library0.addMagazine("9", 1034, 1034, 1034);
      library0.borrow("the member has already added", "=,aTq^");
      String string2 = "ir.ramtung.impl2.Prof";
      try { 
        library0.addStudentMember("ir.ramtung.impl2.Prof", "=,aTq^");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the member has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "";
      library0.returnDocument("IgZI1Zkn0+{6du$<P", "");
      int int0 = library0.getTotalPenalty("");
      assertEquals(0, int0);
      
      List<String> list0 = library0.availableTitles();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(string0));
      
      library0.timePass(0);
      String string1 = "k+MOu";
      library0.timePass(0);
      library0.extend("#: 2S1PGWR5;", "#: 2S1PGWR5;");
      String string2 = "ir.ramtung.impl2.Person";
      List<String> list1 = library0.availableTitles();
      assertNotNull(list1);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(list1.contains(""));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      
      library0.addStudentMember("student name is empty", "ir.ramtung.impl2.Person");
      int int1 = library0.getTotalPenalty("] z]nqD?");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      library0.addMagazine("k+MOu", 1096, 5, 1096);
      library0.returnDocument("R~leeD,lr", "#: 2S1PGWR5;");
      int int2 = (-416);
      try { 
        library0.addBook("k+MOu", 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the book has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "(at7JL$";
      String string1 = "";
      library0.extend("(at7JL$", "");
      String string2 = "P]'>n99Ix/~fH6";
      List<String> list0 = library0.availableTitles();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(string2));
      
      library0.borrow("nLZYJB0_[GB#1_'1k)", "P]'>n99Ix/~fH6");
      int int0 = 2;
      library0.returnDocument("(at7JL$", "qohdV]ga.Lw&1[r-T");
      int int1 = 0;
      try { 
        library0.addMagazine("(at7JL$", 2, 0, 2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // magazine`s number is incorrect
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      List<String> list0 = library0.availableTitles();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<String> list1 = library0.availableTitles();
      assertNotNull(list1);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      
      library0.returnDocument(":", "%yMWiyN>]mEx");
      library0.addProfMember("%yMWiyN>]mEx");
      library0.addBook("@]pzM3OQ^`G%0rSc", 2694);
      int int0 = library0.getTotalPenalty("ir.ramtung.impl2.Prof");
      assertEquals(0, int0);
      
      library0.addMagazine(" xgpL30E", 2694, 5000, 0);
      library0.extend(" xgpL30E", " xgpL30E");
      List<String> list2 = library0.availableTitles();
      assertNotNull(list2);
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      assertFalse(list2.contains(" xgpL30E"));
      assertTrue(list2.contains("@]pzM3OQ^`G%0rSc"));
      assertFalse(list2.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      
      library0.addStudentMember(" xgpL30E", " xgpL30E");
      library0.addProfMember("");
      String string0 = "dEfb=8";
      int int1 = library0.getTotalPenalty(" xgpL30E");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      library0.timePass(1155);
      library0.extend("dEfb=8", (String) null);
      List<String> list3 = library0.availableTitles();
      assertNotNull(list3);
      assertEquals(1, list3.size());
      assertFalse(list3.isEmpty());
      assertFalse(list3.contains(" xgpL30E"));
      assertTrue(list3.contains("@]pzM3OQ^`G%0rSc"));
      assertFalse(list3.equals((Object)list1));
      assertFalse(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertNotSame(list3, list0);
      
      library0.borrow(" xgpL30E", (String) null);
      int int2 = library0.getTotalPenalty((String) null);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      // Undeclared exception!
      try { 
        library0.addProfMember((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      List<String> list0 = library0.availableTitles();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<String> list1 = library0.availableTitles();
      assertNotNull(list1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      
      library0.addBook("L-}I$q9r.dn{~", 0);
      library0.timePass(0);
      library0.extend("ir.ramtung.impl2.Person", "ir.ramtung.impl2.Person");
      library0.returnDocument("ir.ramtung.impl2.Student", (String) null);
      library0.timePass(0);
      library0.borrow("L-}I$q9r.dn{~", "ir.ramtung.impl2.Student");
      library0.addStudentMember("\"", "^OBOE$gt0-)W");
      library0.returnDocument("L-}I$q9r.dn{~", "ir.ramtung.impl2.Person");
      library0.returnDocument("", (String) null);
      library0.borrow((String) null, (String) null);
      String string0 = "";
      // Undeclared exception!
      try { 
        library0.addReference((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Library library0 = new Library();
      library0.availableTitles();
      library0.returnDocument("", "");
      library0.addReference("", (-861));
      library0.addProfMember("student id is empty");
      library0.returnDocument((String) null, "student id is empty");
      library0.extend("e7Lmr>1S+wn", "magazine name is empty");
      library0.addBook("vN,x?Tder", 235);
      library0.borrow("=G P", "vN,x?Tder");
      library0.extend("=G P", "");
      try { 
        library0.addMagazine("", 188, 235, 188);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the magazine has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Library library0 = new Library();
      String string0 = "";
      library0.getTotalPenalty("");
      int int0 = (-2223);
      int int1 = (-495);
      String string1 = ".YWZ";
      library0.getTotalPenalty(".YWZ");
      library0.addReference("", (-495));
      String string2 = "";
      try { 
        library0.borrow("", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // this book doesnt exist
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Library library0 = new Library();
      String string0 = "";
      int int0 = 1;
      library0.addBook("", 1);
      int int1 = (-1);
      try { 
        library0.addReference("", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the reference has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Library library0 = new Library();
      library0.returnDocument("student id is empty", "student id is empty");
      try { 
        library0.addMagazine("student id is empty", (-864), 2242, 2242);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // magazine`s year is incorrect
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Library library0 = new Library();
      library0.returnDocument("D:h0rqh}?>\"X#GFto~", "}9^kWf+Zys.|~NF");
      library0.returnDocument("the reference has already added", "'<^Wb>gN");
      library0.addProfMember("ir.ramtung.impl2.Magazine");
      library0.addMagazine("'<^Wb>gN", 10, 10, 10);
      library0.addStudentMember("the magazine has already added", "b6q-)j");
      library0.extend("ir.ramtung.impl2.Magazine", "");
      library0.getTotalPenalty("b6q-)j");
      library0.addProfMember("");
      library0.getTotalPenalty("G3^Y:z;5Hh~{}iP");
      library0.timePass(0);
      library0.getTotalPenalty("");
      library0.returnDocument("ir.ramtung.impl2.Magazine", "");
      library0.addReference("", (-1367));
      library0.getTotalPenalty("ir.ramtung.impl2.Magazine");
      library0.extend("ir.ramtung.impl2.Magazine", "");
      library0.borrow("ir.ramtung.impl2.Magazine", (String) null);
      library0.returnDocument("", "");
      library0.availableTitles();
      try { 
        library0.addProfMember("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the member has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }
}
