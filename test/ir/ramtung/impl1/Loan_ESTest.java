/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 23 10:20:40 GMT 2022
 */

package ir.ramtung.impl1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ir.ramtung.impl1.Book;
import ir.ramtung.impl1.Document;
import ir.ramtung.impl1.Loan;
import ir.ramtung.impl1.Magazine;
import ir.ramtung.impl1.Member;
import ir.ramtung.impl1.Professor;
import ir.ramtung.impl1.Reference;
import ir.ramtung.impl1.Student;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Loan_ESTest extends Loan_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Professor professor0 = new Professor((String) null);
      Reference reference0 = new Reference("ir.ramtung.impl1.Loan");
      Loan loan0 = new Loan(professor0, reference0, (-2675));
      int int0 = loan0.getPenalty((-2670));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Professor professor0 = new Professor("Cannot extend a late loan");
      Reference reference0 = new Reference("Cannot extend a late loan");
      Loan loan0 = new Loan(professor0, reference0, 0);
      loan0.extend((-1753));
      loan0.return_(10);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Student student0 = new Student("#:u}\"*0%$Kbb`#", "#:u}\"*0%$Kbb`#");
      Magazine magazine0 = new Magazine("#:u}\"*0%$Kbb`#", 3000, 3000);
      Loan loan0 = new Loan(student0, magazine0, 0);
      loan0.extend(2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Student student0 = new Student("#:u}\"*0%$Kbb`#", "#:u}\"*0%$Kbb`#");
      Magazine magazine0 = new Magazine("#:u}\"*0%$Kbb`#", 3000, 3000);
      Loan loan0 = new Loan(student0, magazine0, 0);
      int int0 = loan0.getPenalty(21);
      assertEquals(57000, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Professor professor0 = new Professor("Cannot extend a late loan");
      Reference reference0 = new Reference("Cannot extend a late loan");
      Loan loan0 = new Loan(professor0, reference0, 0);
      int int0 = loan0.getPenalty(10);
      assertEquals((-38000), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Student student0 = new Student("#:u}\"*0%$Kbb`#", "#:u}\"*0%$Kbb`#");
      Magazine magazine0 = new Magazine("#:u}\"*0%$Kbb`#", 3000, 3000);
      Loan loan0 = new Loan(student0, magazine0, 0);
      int int0 = loan0.getPenalty((-2524));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Student student0 = new Student("#:u}\"*0%$Kbb`#", "#:u}\"*0%$Kbb`#");
      Magazine magazine0 = new Magazine("#:u}\"*0%$Kbb`#", 3000, 3000);
      Loan loan0 = new Loan(student0, magazine0, 0);
      loan0.return_(3000);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Student student0 = new Student("Empty student IDis not alowed", "Empty student IDis not alowed");
      Book book0 = new Book("Empty student IDis not alowed");
      Loan loan0 = new Loan(student0, book0, 2496);
      loan0.return_(2496);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Student student0 = new Student("#:u}\"*0%$Kbb`#", "#:u}\"*0%$Kbb`#");
      Magazine magazine0 = new Magazine("#:u}\"*0%$Kbb`#", 3000, 3000);
      Loan loan0 = new Loan(student0, magazine0, 0);
      try { 
        loan0.extend(0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot extend on the same day borrowed
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Student student0 = new Student("Already extended twice", "Already extended twice");
      Reference reference0 = new Reference("Already extended twice");
      Loan loan0 = new Loan(student0, reference0, 2252);
      loan0.extend(1791);
      loan0.extend(1791);
      try { 
        loan0.extend(1791);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Already extended twice
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Student student0 = new Student("Empty student IDis not alowed", "Empty student IDis not alowed");
      Book book0 = new Book("Empty student IDis not alowed");
      Loan loan0 = new Loan(student0, book0, 2496);
      boolean boolean0 = loan0.isBy(student0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Student student0 = new Student("Empty student IDis not alowed", "Empty student IDis not alowed");
      Book book0 = new Book("Empty student IDis not alowed");
      Loan loan0 = new Loan(student0, book0, 2496);
      boolean boolean0 = loan0.isBy((Member) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Student student0 = new Student("Already extended twice", "Already extended twice");
      Reference reference0 = new Reference("Already extended twice");
      Loan loan0 = new Loan(student0, reference0, 2252);
      boolean boolean0 = loan0.isFor(reference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Student student0 = new Student("Already extended twice", "Already extended twice");
      Reference reference0 = new Reference("Already extended twice");
      Loan loan0 = new Loan(student0, reference0, 2252);
      Reference reference1 = new Reference("Already extended twice");
      boolean boolean0 = loan0.isFor(reference1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Professor professor0 = new Professor((String) null);
      Reference reference0 = new Reference((String) null);
      Loan loan0 = new Loan(professor0, reference0, (-475));
      try { 
        loan0.extend(980);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot extend a late loan
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Professor professor0 = new Professor("<~L241X9[[$Wda`ms");
      Loan loan0 = null;
      try {
        loan0 = new Loan(professor0, (Document) null, (-22));
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Invalid argument to loan constructor
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Magazine magazine0 = new Magazine("ir.ramtung.impl1.CannotExtendEx", 672, 672);
      Loan loan0 = null;
      try {
        loan0 = new Loan((Member) null, magazine0, 672);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Invalid argument to loan constructor
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }
}
