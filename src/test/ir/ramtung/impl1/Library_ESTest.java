/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 23 10:19:56 GMT 2022
 */

package ir.ramtung.impl1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Library_ESTest extends Library_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Library library0 = new Library();
      library0.timePass(876);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.returnDocument("Already extended twice", "ir.ramtung.impl1.Library");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The document is not in member's loan
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.extend("BPS2)p", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The document is not in member's loan
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Library library0 = new Library();
      library0.addProfMember("|");
      library0.addMagazine("|", 24, 24, 24);
      library0.borrow("|", "|");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Library library0 = new Library();
      library0.addMagazine("Already extended twice", 1993, 2000, 2000);
      try { 
        library0.borrow("ld;LW=L8", "Already extended twice");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find member to borrow
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.borrow("Already extended twice", "A2vMzZ7-eRO");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find document to borrow
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Library library0 = new Library();
      library0.addMagazine("Negative or zero copies of a document cannot be added", 942, 942, 3579);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Library library0 = new Library();
      library0.addStudentMember("ox$q", "Vxl");
      try { 
        library0.addProfMember("Vxl");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Member with the same name exists
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.addBook("sjbBfN", 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Negative or zero copies of a document cannot be added
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Library library0 = new Library();
      library0.addProfMember("ir.ramtung.sts01.LibraryException");
      try { 
        library0.addStudentMember((String) null, "ir.ramtung.sts01.LibraryException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Member with the same name exists
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Library library0 = new Library();
      library0.addStudentMember("Empty student ID isnotlowed", "Empty student ID isnotlowed");
      library0.addStudentMember("/hl2sbzx", "Document with the same title exists");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Library library0 = new Library();
      library0.addMagazine("j", 1, 1, 1);
      try { 
        library0.addMagazine("j", 2727, 1, 1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Document with the same title exists
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.addReference("W-L)*2", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Negative or zero copies of a document cannot be added
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Library library0 = new Library();
      library0.addMagazine("j", 1, 1, 1);
      library0.addReference("Negative or zero copies of a document cannot be added", 1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.timePass((-1021));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot go back in time
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Library library0 = new Library();
      library0.timePass(0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.getTotalPenalty("uo^#p6],");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find member
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Library library0 = new Library();
      library0.addStudentMember("Empty student ID isnotlowed", "Empty student ID isnotlowed");
      int int0 = library0.getTotalPenalty("Empty student ID isnotlowed");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Library library0 = new Library();
      library0.addMagazine("j", 1, 1, 1);
      List<String> list0 = library0.availableTitles();
      assertTrue(list0.contains("j"));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Library library0 = new Library();
      List<String> list0 = library0.availableTitles();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Library library0 = new Library();
      library0.addProfMember("j");
      library0.addMagazine("j", 1, 1, 1);
      library0.borrow("j", "j");
      List<String> list0 = library0.availableTitles();
      assertFalse(list0.contains("j"));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Library library0 = new Library();
      library0.addBook("Empty member name not allowed", 4622);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Library library0 = new Library();
      library0.addProfMember((String) null);
      try { 
        library0.getTotalPenalty("Empty student ID is not allowed");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find member
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }
}
