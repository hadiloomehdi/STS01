/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 23 12:41:17 GMT 2022
 */

package ir.ramtung.impl2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ir.ramtung.impl2.Library;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Library_ESTest extends Library_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      // Undeclared exception!
      library0.timePass(2147483645);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "ir.ramtung.impl2.Book";
      int int0 = library0.getTotalPenalty("XY>`3ZB");
      assertEquals(0, int0);
      
      int int1 = library0.getTotalPenalty("ir.ramtung.impl2.Book");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      library0.borrow("ir.ramtung.impl2.Reference", ">m`");
      library0.addBook("ir.ramtung.impl2.Book", 1780);
      library0.addStudentMember("XY>`3ZB", "dq6y");
      List<String> list0 = library0.availableTitles();
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains("dq6y"));
      assertTrue(list0.contains("ir.ramtung.impl2.Book"));
      
      library0.addProfMember(";CtN95");
      library0.addMagazine(">m`", 1576, 4050, 1576);
      String string1 = "b-a4";
      library0.addStudentMember("XY>`3ZB", "ir.ramtung.impl2.Book");
      try { 
        library0.addMagazine(" ", 1780, (-768), (-768));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // magazine name is empty
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "reference name is empty";
      library0.addProfMember("reference name is empty");
      List<String> list0 = library0.availableTitles();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(string0));
      
      library0.addMagazine("reference name is empty", 1748, 1748, 1748);
      library0.returnDocument("reference name is empty", (String) null);
      String string1 = "ir.ramtung.impl2.Person";
      library0.addReference("ir.ramtung.impl2.Person", 0);
      try { 
        library0.borrow("reference name is empty", "ir.ramtung.impl2.Person");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // this book doesnt exist
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "\\<!AJhXZ.";
      List<String> list0 = library0.availableTitles();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(string0));
      
      library0.addBook("<!AJhXZ.", 895);
      library0.timePass(0);
      String string1 = " ";
      String string2 = "prof name is empty";
      library0.addStudentMember("<!AJhXZ.", "prof name is empty");
      library0.extend("magazine`s number is incorrect", "");
      library0.returnDocument("<!AJhXZ.", " ");
      try { 
        library0.addBook(" ", 895);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // book name is empty
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.addProfMember("reference name is empty");
      List<String> list0 = library0.availableTitles();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains("reference name is empty"));
      
      library0.returnDocument("reference name is empty", (String) null);
      library0.addReference("ir.ramtung.impl2.Person", 0);
      int int0 = library0.getTotalPenalty("ir.ramtung.impl2.Person");
      assertEquals(0, int0);
      
      library0.addReference("magazine name is empty", 0);
      library0.timePass(0);
      library0.extend("A+zY%eqm4}GPGh", "reference name is empty");
      library0.addStudentMember("magazine name is empty", "ir.ramtung.impl2.Person");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "magazine name is empty";
      library0.addProfMember("magazine name is empty");
      String string1 = "ir.ramtung.impl2.Library";
      List<String> list0 = library0.availableTitles();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(string0));
      
      library0.addBook("magazine name is empty", (-555));
      String string2 = "ir.ramtung.sts01.LibraryException";
      library0.addProfMember("ir.ramtung.sts01.LibraryException");
      library0.borrow("magazine name is empty", "ir.ramtung.sts01.LibraryException");
      try { 
        library0.addStudentMember("magazine name is empty", "magazine name is empty");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the member has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      int int0 = library0.getTotalPenalty("the member cant borrow any more");
      assertEquals(0, int0);
      
      library0.extend("ir.ramtung.impl2.Student", "ir.ramtung.impl2.Student");
      library0.extend("M*=2prd}T*t[[|@WS;<", "M*=2prd}T*t[[|@WS;<");
      library0.addMagazine("g,NeY fE]jxr~h", 2362, 2523, 2621);
      library0.returnDocument("3&CZ2{0<'W[-f", "3&CZ2{0<'W[-f");
      library0.addReference("", 158);
      List<String> list0 = library0.availableTitles();
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains("the member cant borrow any more"));
      assertTrue(list0.contains(""));
      
      library0.addProfMember("");
      library0.addReference("W'>|U", (-1));
      library0.addReference("3&CZ2{0<'W[-f", 2621);
      library0.borrow("3&CZ2{0<'W[-f", "");
      List<String> list1 = library0.availableTitles();
      assertFalse(list1.isEmpty());
      assertEquals(3, list1.size());
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertTrue(list1.contains(""));
      assertFalse(list1.contains("the member cant borrow any more"));
      assertFalse(list1.equals((Object)list0));
      
      library0.addMagazine("ir.ramtung.impl2.Book", 1, 158, 2523);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      int int0 = library0.getTotalPenalty("");
      assertEquals(0, int0);
      
      library0.addReference("@Ixc\"|d^K/~9BN", 3);
      int int1 = 3000;
      library0.timePass(3000);
      library0.borrow("@Ixc\"|d^K/~9BN", "@Ixc\"|d^K/~9BN");
      String string0 = "ir.ramtung.impl2.Library";
      library0.timePass(766);
      List<String> list0 = library0.availableTitles();
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(""));
      assertTrue(list0.contains("@Ixc\"|d^K/~9BN"));
      
      library0.returnDocument("ir.ramtung.impl2.Library", (String) null);
      // Undeclared exception!
      try { 
        library0.addProfMember((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      List<String> list0 = library0.availableTitles();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      library0.timePass(0);
      library0.addProfMember("ir.ramtung.impl2.Prof");
      library0.borrow("", "");
      library0.addBook("", 1);
      int int0 = 0;
      try { 
        library0.addBook("", 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the book has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.extend("ir.ramtung.impl2.Prof", "");
      library0.extend("", "");
      library0.addMagazine("this book doesnt exist", 1, 2553, 2553);
      library0.borrow("jx", "");
      library0.returnDocument("vE$H$#LZM^cD/s\"8!W", "");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.addBook("ir.ramtung.impl2.Library", 0);
      library0.addStudentMember("ir.ramtung.impl2.Library", "ir.ramtung.sts01.LibraryException");
      library0.addProfMember("ir.ramtung.impl2.Library");
      library0.timePass(0);
      library0.extend("ir.ramtung.impl2.Library", "ir.ramtung.impl2.Library");
      try { 
        library0.addMagazine("ir.ramtung.impl2.Library", 728, 2322, 728);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the magazine has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      List<String> list0 = library0.availableTitles();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      library0.addProfMember("days cant be negative");
      library0.addBook("tpUT$xk]ty8LjEZ5", 2232);
      library0.extend("tpUT$xk]ty8LjEZ5", "j@");
      library0.addReference("days cant be negative", 2232);
      library0.extend("days cant be negative", "book name is empty");
      library0.returnDocument("book name is empty", "~4 :zp2(");
      library0.addBook("book name is empty", 10);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "this book doesnt exist";
      library0.returnDocument("this book doesnt exist", "this book doesnt exist");
      int int0 = (-1031);
      int int1 = library0.getTotalPenalty("this book doesnt exist");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string1 = "the reference has already added";
      // Undeclared exception!
      try { 
        library0.addReference((String) null, 2451);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      List<String> list0 = library0.availableTitles();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      library0.addReference("eEqM'^eyaU&Tz", 1831);
      library0.borrow("eEqM'^eyaU&Tz", "kg>!");
      library0.returnDocument("ekzz*H+LiX2>ivg", "}-#%QKL?:3");
      library0.addMagazine("", 1718, 1718, 0);
      List<String> list1 = library0.availableTitles();
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertFalse(list1.contains("kg>!"));
      assertTrue(list1.contains("eEqM'^eyaU&Tz"));
      assertFalse(list1.equals((Object)list0));
      
      library0.timePass(3);
      library0.addBook("$;Sd>L", 0);
      List<String> list2 = library0.availableTitles();
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertNotNull(list2);
      assertFalse(list2.contains("kg>!"));
      assertTrue(list2.contains("eEqM'^eyaU&Tz"));
      assertTrue(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      
      int int0 = library0.getTotalPenalty("$;Sd>L");
      assertEquals(0, int0);
      
      library0.addReference("5Sm]7-", 0);
      library0.addProfMember("5Sm]7-");
      library0.borrow("}-#%QKL?:3", "TZ%/(,Po");
      library0.borrow("ekzz*H+LiX2>ivg", "`qDiU[yZ`?R;#+8Cm");
      library0.extend("eEqM'^eyaU&Tz", "5Sm]7-");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      List<String> list0 = library0.availableTitles();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = "s";
      int int0 = 0;
      try { 
        library0.addMagazine("s", 1, 0, 1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // magazine`s number is incorrect
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = null;
      List<String> list0 = library0.availableTitles();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string1 = "%KlCn$64J>T[2U]fkf";
      int int0 = (-4446);
      // Undeclared exception!
      try { 
        library0.addMagazine((String) null, (-4446), (-538), (-538));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      try { 
        library0.addStudentMember("vL(3", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // student name is empty
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      List<String> list0 = library0.availableTitles();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      library0.returnDocument("", "");
      String string0 = "r0Od4s(j>(Mz";
      try { 
        library0.addMagazine("r0Od4s(j>(Mz", 21, (-2661), 1043);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // magazine`s number is incorrect
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.borrow("q@|*u)NR", "q@|*u)NR");
      library0.addStudentMember("q@|*u)NR", "q@|*u)NR");
      String string0 = ">\"QrQo>.";
      library0.addReference(">\"QrQo>.", (-2022));
      String string1 = "s3";
      library0.addProfMember("s3");
      List<String> list0 = library0.availableTitles();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(string0));
      
      String string2 = "magazine`s year is incorrect";
      library0.returnDocument("", "magazine`s year is incorrect");
      // Undeclared exception!
      try { 
        library0.addStudentMember((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      int int0 = 978;
      library0.addReference("", 978);
      library0.returnDocument("", "/vO4*NLH<V");
      String string0 = "days cant be negative";
      library0.addBook("days cant be negative", 7);
      library0.addProfMember("7`! h");
      library0.returnDocument("o|MCl", "{4");
      int int1 = library0.getTotalPenalty("");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      library0.addStudentMember("0f:*R^$,w.CCA!5<", "0f:*R^$,w.CCA!5<");
      List<String> list0 = library0.availableTitles();
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains("/vO4*NLH<V"));
      assertTrue(list0.contains(""));
      
      library0.returnDocument("", "0f:*R^$,w.CCA!5<");
      try { 
        library0.addBook("", (-409));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the book has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "this book doesnt exist";
      List<String> list0 = library0.availableTitles();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(string0));
      
      library0.extend("this book doesnt exist", "this book doesnt exist");
      library0.addStudentMember("this book doesnt exist", "this book doesnt exist");
      library0.extend("this book doesnt exist", "this book doesnt exist");
      int int0 = library0.getTotalPenalty("this book doesnt exist");
      assertEquals(0, int0);
      
      List<String> list1 = library0.availableTitles();
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertFalse(list1.contains("this book doesnt exist"));
      assertTrue(list1.equals((Object)list0));
      
      try { 
        library0.addMagazine("this book doesnt exist", 0, 1390, 503);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // magazine`s year is incorrect
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.addStudentMember("ir.ramtung.impl2.Person", "ir.ramtung.impl2.Person");
      String string0 = " ";
      String string1 = "ir.ramtung.impl2.Magazine";
      int int0 = library0.getTotalPenalty(" ");
      assertEquals(0, int0);
      
      library0.addBook("+bg0PN>*m>?%(", 0);
      try { 
        library0.addProfMember(" ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // prof name is empty
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.addProfMember("?0~jB");
      library0.extend("?0~jB", "?0~jB");
      library0.addProfMember("K>Y|ZE,<'l0'W<");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      try { 
        library0.addMagazine("", 0, 1703, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // magazine`s year is incorrect
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.timePass(0);
      library0.extend("e|)(eX@ZSr1", "e|)(eX@ZSr1");
      library0.returnDocument("e|)(eX@ZSr1", "e|)(eX@ZSr1");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "";
      library0.extend("", "");
      library0.borrow("", "");
      int int0 = 776;
      library0.addReference("", 776);
      String string1 = "m]E&y+";
      // Undeclared exception!
      try { 
        library0.addProfMember((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "\"Y@";
      String string1 = "";
      library0.borrow("C1%,cA:*", "");
      int int0 = 1555;
      library0.addReference("\"Y@", 1555);
      library0.extend("C1%,cA:*", "\"Y@");
      String string2 = null;
      int int1 = library0.getTotalPenalty("");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      library0.returnDocument("\"Y@", "mOFld+'7!a");
      // Undeclared exception!
      try { 
        library0.addBook((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "ir.ramtung.impl2.Library";
      int int0 = 2531;
      int int1 = (-1);
      library0.addMagazine("ir.ramtung.impl2.Library", 2531, 2531, (-1));
      library0.addProfMember("-$\u0007JP[+h`g&'/\"|@af");
      String string1 = "";
      try { 
        library0.borrow("", "ir.ramtung.impl2.Library");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // this book doesnt exist
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "";
      String string1 = "the reference has already added";
      library0.addReference("the reference has already added", (-1));
      String string2 = "";
      library0.addProfMember("");
      library0.addBook("", (-1));
      try { 
        library0.borrow("", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // this book doesnt exist
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "";
      List<String> list0 = library0.availableTitles();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(string0));
      
      String string1 = "_J/'w*^&EOA+TwF}n\">";
      library0.returnDocument("_J/'w*^&EOA+TwF}n\">", "");
      int int0 = library0.getTotalPenalty("");
      assertEquals(0, int0);
      
      library0.addStudentMember("_J/'w*^&EOA+TwF}n\">", "ir.ramtung.impl2.Book");
      library0.extend("", "E|:p.{I}h>");
      String string2 = "";
      // Undeclared exception!
      try { 
        library0.borrow("ir.ramtung.impl2.Book", "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      try { 
        library0.timePass((-861));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // days cant be negative
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "";
      library0.returnDocument("", "");
      String string1 = "ir.ramtung.impl2.Document";
      library0.returnDocument("lj [K;gL]jpXn~", "ir.ramtung.sts01.LibraryException");
      library0.returnDocument("ir.ramtung.sts01.LibraryException", "gB&");
      int int0 = library0.getTotalPenalty(")hkN");
      assertEquals(0, int0);
      
      try { 
        library0.addStudentMember("", "ir.ramtung.impl2.Document");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // student id is empty
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "s4q1gORsmk9pl&t";
      library0.extend("Fy-u:Sb{", "s4q1gORsmk9pl&t");
      String string1 = ".O*";
      int int0 = (-1006);
      library0.extend("s4q1gORsmk9pl&t", "6H7PO6Q,h[&9");
      int int1 = (-3207);
      int int2 = (-1632);
      try { 
        library0.addMagazine(".O*", (-1006), (-3207), (-1632));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // magazine`s year is incorrect
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.addReference("ir.ramtung.impl2.Reference", (-1));
      library0.addStudentMember("ir.ramtung.impl2.Reference", "ir.ramtung.impl2.Reference");
      library0.addStudentMember("ir.ramtung.impl2.Reference", "the magazine has already added");
      library0.returnDocument("oLp?t.:Ys8o[Q^", "the member has already added");
      try { 
        library0.addProfMember("ir.ramtung.impl2.Reference");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the member has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.addStudentMember("this book doesnt exist", "U+y;S.a");
      library0.addBook("this book doesnt exist", 0);
      library0.returnDocument("mZ'F7Zc]rNP\"a&6G=j", "mZ'F7Zc]rNP\"a&6G=j");
      library0.borrow("U+y;S.a", "ir.ramtung.impl2.Prof");
      library0.addMagazine("mZ'F7Zc]rNP\"a&6G=j", 5000, 5000, 10);
      library0.timePass(1422);
      library0.extend("mZ'F7Zc]rNP\"a&6G=j", "this book doesnt exist");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      int int0 = library0.getTotalPenalty("s(au^8J}aYb)Q-&");
      assertEquals(0, int0);
      
      int int1 = library0.getTotalPenalty("");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      library0.addProfMember("yO;(9%}%~nO");
      library0.borrow("s(au^8J}aYb)Q-&", "ir.ramtung.sts01.LibraryException");
      library0.addReference("", 0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.borrow("", "");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "-*6u0$Zy";
      int int0 = (-1);
      library0.addReference("-*6u0$Zy", (-1));
      try { 
        library0.addReference("-*6u0$Zy", 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the reference has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.addMagazine("reference name is empty", 3000, 3000, 0);
      library0.addReference("tX] M\"*v0kw@JB", 41);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      try { 
        library0.timePass((-1594));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // days cant be negative
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.timePass(1712);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = " ";
      int int0 = 1;
      try { 
        library0.addReference(" ", 1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // reference name is empty
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.extend("", "");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      try { 
        library0.addMagazine(";&IX2vj+U(NDA@", (-805), (-805), (-805));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // magazine`s year is incorrect
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.addProfMember("");
      library0.addStudentMember("Og9dNNfwqN73U{WOH", "]*\"1uq+a1");
      library0.returnDocument("", "");
      try { 
        library0.addProfMember("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the member has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.addReference("1Vd)S>(91W", (-184));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "this book doesnt exist";
      library0.addStudentMember("this book doesnt exist", "this book doesnt exist");
      int int0 = 1;
      int int1 = 2368;
      String string1 = "5c.9{E=g@RG)oZ0RQ";
      library0.addReference("5c.9{E=g@RG)oZ0RQ", 1);
      library0.addMagazine("this book doesnt exist", 1, 2368, 1);
      library0.returnDocument("this book doesnt exist", "this book doesnt exist");
      String string2 = "c8";
      library0.addStudentMember("c8", "c8");
      List<String> list0 = library0.availableTitles();
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains("c8"));
      assertTrue(list0.contains("this book doesnt exist"));
      
      try { 
        library0.addBook("this book doesnt exist", 2368);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the book has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "JF~T#7!`T|vetW";
      int int0 = 3000;
      library0.addReference("JF~T#7!`T|vetW", 3000);
      int int1 = 264;
      try { 
        library0.addMagazine("JF~T#7!`T|vetW", 3601, 3601, 264);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the magazine has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      library0.addBook("\"", 1747);
      library0.addProfMember("oXbCvc7g*Pc?");
      library0.timePass(3608);
      library0.extend("oXbCvc7g*Pc?", "#[ OS,");
      library0.borrow(">z&np9<", "6AryiHAwo0yU");
      library0.borrow("oXbCvc7g*Pc?", "6AryiHAwo0yU");
      try { 
        library0.timePass((-1026));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // days cant be negative
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "+\"[ \"=v4_ms3Wj";
      int int0 = 1;
      library0.addReference("+\"[ \"=v4_ms3Wj", 1);
      library0.addProfMember("+\"[ \"=v4_ms3Wj");
      String string1 = "";
      int int1 = library0.getTotalPenalty("");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      library0.addProfMember("");
      library0.returnDocument("+\"[ \"=v4_ms3Wj", "gl(R]^D");
      try { 
        library0.addStudentMember("+\"[ \"=v4_ms3Wj", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // student name is empty
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      int int0 = library0.getTotalPenalty("the member cant borrow any more");
      assertEquals(0, int0);
      
      library0.extend("ir.ramtung.impl2.Student", "ir.ramtung.impl2.Student");
      library0.extend("M*=2prd}T*t[[|@WS;<", "M*=2prd}T*t[[|@WS;<");
      library0.addMagazine("g,NeY fE]jxr~h", 2362, 2523, 2621);
      library0.returnDocument("3&CZ2{0<'W[-f", "3&CZ2{0<'W[-f");
      library0.addReference("", 158);
      List<String> list0 = library0.availableTitles();
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains("the member cant borrow any more"));
      assertTrue(list0.contains("g,NeY fE]jxr~h"));
      
      library0.addProfMember("");
      library0.addReference("W'>|U", (-1));
      library0.addReference("3&CZ2{0<'W[-f", 2621);
      library0.borrow("3&CZ2{0<'W[-f", "");
      List<String> list1 = library0.availableTitles();
      assertEquals(3, list1.size());
      assertFalse(list1.isEmpty());
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertTrue(list1.contains("3&CZ2{0<'W[-f"));
      assertFalse(list1.contains("the member cant borrow any more"));
      assertFalse(list1.equals((Object)list0));
      
      library0.addMagazine("ir.ramtung.impl2.Book", 158, 158, 2523);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = "";
      String string1 = "\"SFbISCK;;+]#RY>:";
      library0.returnDocument("", "\"SFbISCK;;+]#RY>:");
      try { 
        library0.addStudentMember("", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // student id is empty
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      List<String> list0 = library0.availableTitles();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      library0.addProfMember("tF{s?EXJ");
      List<String> list1 = library0.availableTitles();
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertFalse(list1.contains("tF{s?EXJ"));
      assertTrue(list1.equals((Object)list0));
      
      library0.addMagazine("~P8avd('E", 2000, 2000, 2000);
      library0.addStudentMember("~P8avd('E", "*");
      try { 
        library0.addProfMember("tF{s?EXJ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the member has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Library library0 = new Library();
      assertNotNull(library0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        library0.addReference((String) null, 158);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Library library0 = new Library();
      library0.returnDocument("}]UWD 4>rz&/8;x$", "");
      library0.timePass(124);
      library0.getTotalPenalty("8y~4t+EMnp]@|UoS");
      library0.addProfMember("8y~4t+EMnp]@|UoS");
      String string0 = "yWgT]%DBYTMZdQO!~";
      library0.addReference(";CtN95", 2);
      library0.getTotalPenalty("=)6");
      library0.extend("=)6", "yWgT]%DBYTMZdQO!~");
      library0.returnDocument("=)6", "yWgT]%DBYTMZdQO!~");
      library0.timePass(0);
      library0.addBook("_y", 0);
      library0.returnDocument("yWgT]%DBYTMZdQO!~", "=)6");
      library0.availableTitles();
      library0.addBook("yWgT]%DBYTMZdQO!~", 0);
      library0.addReference("!p/lj9$tpmM", 0);
      library0.addBook("", (-1644));
      library0.getTotalPenalty("8y~4t+EMnp]@|UoS");
      library0.addStudentMember("prof name is empty", "ir.ramtung.impl2.Prof");
      try { 
        library0.addMagazine("/`V3Z~z", 124, 0, 37);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // magazine`s number is incorrect
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Library library0 = new Library();
      library0.returnDocument("book name is empty", "oXbCvc7g*Pc?");
      library0.addStudentMember("book name is empty", "_mCllv1@fW|5l");
      library0.borrow("book name is empty", "oXbCvc7g*Pc?");
      library0.addReference("oXbCvc7g*Pc?", (-1788));
      library0.addReference("book name is empty", 0);
      library0.addStudentMember("ir.ramtung.impl2.Reference", "ir.ramtung.impl2.Reference");
      library0.addStudentMember("bn%L{`u/)p#5", "bn%L{`u/)p#5");
      try { 
        library0.addReference("oXbCvc7g*Pc?", 749);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the reference has already added
         //
         verifyException("ir.ramtung.impl2.Library", e);
      }
  }
}
