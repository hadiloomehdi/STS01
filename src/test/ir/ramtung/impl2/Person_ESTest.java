/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 23 10:20:58 GMT 2022
 */

package ir.ramtung.impl2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Person_ESTest extends Person_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Student student0 = new Student("4", "4");
      Book book0 = new Book("4", (-1741));
      student0.borrow(book0);
      Magazine magazine0 = new Magazine("4", (-1741), (-1741), (-1741));
      magazine0.day = (-1741);
      student0.borrow(magazine0);
      student0.timePass();
      assertEquals(2000, student0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Prof prof0 = new Prof("cant extend");
      Reference reference0 = new Reference("#((S4tA", 38);
      prof0.borrow(reference0);
      Magazine magazine0 = new Magazine("cant extend", (-1), (-1), (-396));
      prof0.borrow(magazine0);
      prof0.returnDoc("cant extend");
      assertEquals(0, prof0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Student student0 = new Student("QLy{BR#Jy", "5|xW1O:\"@2O>");
      Magazine magazine0 = new Magazine("", (-1024), (-1024), 1202);
      student0.borrow(magazine0);
      student0.borrow(magazine0);
      student0.extend("");
      assertEquals(0, student0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Prof prof0 = new Prof("ir.ramtung.impl2.Person");
      Magazine magazine0 = new Magazine((String) null, 0, 0, 0);
      prof0.borrow(magazine0);
      prof0.timePass();
      prof0.timePass();
      prof0.timePass();
      // Undeclared exception!
      try { 
        prof0.extend((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Prof prof0 = new Prof("ir.ramtung.impl2.Person");
      Magazine magazine0 = new Magazine((String) null, 0, 0, 0);
      prof0.borrow(magazine0);
      prof0.timePass();
      prof0.timePass();
      prof0.timePass();
      int int0 = prof0.getPenalty();
      assertEquals(2000, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Prof prof0 = new Prof("");
      prof0.penalty = (-1);
      int int0 = prof0.getPenalty();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Student student0 = new Student("2 s??:", (String) null);
      student0.getName();
      assertEquals(0, student0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Prof prof0 = new Prof("");
      String string0 = prof0.getName();
      assertNotNull(string0);
      assertEquals(0, prof0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Prof prof0 = new Prof("$DkJ*dxtoH]");
      prof0.canBorrow();
      assertEquals(0, prof0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Student student0 = new Student("ir.ramtung.impl2.Student", "ir.ramtung.impl2.Student");
      Reference reference0 = new Reference("ir.ramtung.impl2.Student", 1116);
      student0.borrow(reference0);
      student0.borrow(reference0);
      boolean boolean0 = student0.canBorrow();
      assertFalse(student0.canBorrow());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Prof prof0 = new Prof("");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      prof0.dayBorrow = (List<Integer>) linkedList0;
      linkedList0.add((Integer) null);
      // Undeclared exception!
      try { 
        prof0.timePass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ir.ramtung.impl2.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Student student0 = new Student((String) null, (String) null);
      Magazine magazine0 = new Magazine((String) null, 0, (-2852), 1780);
      student0.borrow(magazine0);
      // Undeclared exception!
      try { 
        student0.returnDoc((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Prof prof0 = new Prof("bV*.");
      Reference reference0 = new Reference("", 0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      prof0.dayBorrow = (List<Integer>) linkedList0;
      prof0.borrow(reference0);
      linkedList0.clear();
      // Undeclared exception!
      try { 
        prof0.returnDoc("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Prof prof0 = new Prof("Zwhfc)hu6l)MN-j)+H");
      Reference reference0 = new Reference("Zwhfc)hu6l)MN-j)+H", (-1816));
      prof0.borrow(reference0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      prof0.dayBorrow = (List<Integer>) linkedList0;
      // Undeclared exception!
      try { 
        prof0.extend("Zwhfc)hu6l)MN-j)+H");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Student student0 = new Student("cant extend", "rCaVkIZ");
      student0.docsBorrow = null;
      // Undeclared exception!
      try { 
        student0.canBorrow();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ir.ramtung.impl2.Student", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Prof prof0 = new Prof("");
      // Undeclared exception!
      try { 
        prof0.borrow((Document) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ir.ramtung.impl2.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Student student0 = new Student("", "");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      student0.dayBorrow = (List<Integer>) linkedList0;
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        student0.timePass();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Prof prof0 = new Prof("ir.rmtung.impll.Person");
      Book book0 = new Book("ir.ramtung.imrls.Person", (-1));
      prof0.borrow(book0);
      prof0.returnDoc("ir.rmtung.impll.Person");
      assertEquals(0, prof0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Prof prof0 = new Prof("ir.ramtung.impl2.Prof");
      Magazine magazine0 = new Magazine("ir.ramtung.impl2.Prof", (-1293), (-1293), (-1293));
      prof0.borrow(magazine0);
      prof0.extend("ir.ramtung.impl2.Prof");
      try { 
        prof0.extend("ir.ramtung.impl2.Prof");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // cant extend
         //
         verifyException("ir.ramtung.impl2.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Prof prof0 = new Prof("Zwhfc)hu6l)MN-j)+H");
      Reference reference0 = new Reference("Zwhfc)hu6l)MN-j)+H", (-1816));
      prof0.borrow(reference0);
      prof0.extend("Zwhfc)hu6l)MN-j)+H");
      assertEquals(0, prof0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Student student0 = new Student("", "ir.ramtung.impl2.Person");
      Reference reference0 = new Reference("\"=GbL", 2454);
      student0.borrow(reference0);
      try { 
        student0.extend("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // cant extend
         //
         verifyException("ir.ramtung.impl2.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Prof prof0 = new Prof("Zwhfc)hu6l)MN-j)+H");
      String string0 = prof0.getName();
      assertNotNull(string0);
      assertEquals(0, prof0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Prof prof0 = new Prof("Zwhfc)hu6l)MN-j)+H");
      int int0 = prof0.getPenalty();
      assertEquals(0, int0);
  }
}
